import pandas as pd
from tia.bbg import LocalTerminal
from bnyCompliance.equity.lowPriceSec import executedOrderReport
import tia.bbg.datamgr as dm
import os
from pandas import ExcelWriter
import datetime
from pandas.tseries.offsets import BDay
import glob
t1 = datetime.date.today() - BDay(1)
t1 =  t1.strftime('%Y%m%d')
mgr = dm.BbgDataManager() #this is used to access the bloomberg api with python, used in getAdvs method in class


class lowPriceSecBackDate(object):
    BASE_DIR = 'T://CMI//MUNI//FidessaComplianceReportingBKCM'
    FILE_DIR = ''
    RUN_DATE = ''
    SAVE = 'H:\\Post June 11, 2010\\Equity Low Priced Report\\'
    save = 'H:\\Post June 11, 2010\\Equity Low Priced Report'
    
    df = ''

    def __init__(self, date1, threshold, advthreshold):
        self.date1 = date1
        self.date2 = date1
        self.date3 = date1
        self.threshold = threshold
        self.advthreshold = advthreshold

    def __str__(self):
        return self.BASE_DIR

    def formatDates(self):
        date = self.date1

        date = datetime.datetime.strptime(date, '%Y-%m-%d')

        self.date1 = date.strftime('%m-%d-%y')

        self.date2 = date.strftime('%Y%m%d')

        self.RUN_DATE = date.strftime('%Y-%m-%d')

        self.FILE_DIR = os.path.join(self.BASE_DIR, self.date1, 'EXECUTED_ORDER.' + self.date2 + ".psv")

        print("Fidess report located at " + self.FILE_DIR,
              "\n" + "Report will be ran for:  " + self.RUN_DATE,
              "\n" + "report will be saved in : " + self.save)

        return self.date1, self.date2, self.FILE_DIR, self.RUN_DATE
    
class FormatSaveBackDate(object):
    
    def __init__(self, df1, savedate):
        
        self.df1 = df1
        self.savedate = savedate


    def save(self):
        
        """
        saves the file using the execution date from the dataframe as the file name.
        """
        try:
            df1 = self.df1
            df1['BKCM_TOTAL_VOL'] = df1.groupby('SYMBOL')['VOLUME'].transform('sum')
            df1['BKCM_%_ADV'] = (df1['BKCM_TOTAL_VOL'] / df1['VOLUME_AVG_30D']) * 100
            df1['BKCM_%_OF_VOLUME_YESTERDAY'] = (df1['BKCM_TOTAL_VOL'] / df1[
                'PX_VOLUME_1D']) * 100
            dfAggs = df1.groupby('NAME').agg({'#': 'count',
                                                         'VOLUME': ['sum', 'min'],
                                                         'CUSIP': 'unique',
                                                         'LOCAL_PRICE': ['min', 'max', 'mean'],
                                                         'VOLUME_AVG_30D': 'max',
                                                         'BKCM_%_ADV': 'max',
                                                         'PX_VOLUME_1D': 'max',
                                                         'BKCM_%_OF_VOLUME_YESTERDAY': 'max'
                                                         })
            dfAggs.columns =  ['Total Executions', 'BKCM Total Volume','Minimum Execution Volume',
                               'Cusip','Lowest Execution Price','Max Exection Price',
                               'Avg Execution Price','30 day ADV','BKCM % of 30 day Adv',
                               'Yesterday Total Volume',
                               "BKCM % of Yesterday's Volume"]
            dfs = [dfAggs,df1]
            print(lowPriceSecBackDate.SAVE+self.savedate+'.xlsx')
            writer = ExcelWriter(lowPriceSecBackDate.SAVE+self.savedate+'.xlsx')
            
            for n, df in enumerate(dfs):
                df.to_excel(writer, 'sheet%s' %n)
                
            return writer.save()
        except PermissionError:
            print('someone in file')

def main():
    pass

if __name__ == "__main__":
   # stuff only to run when not called via 'import' here
   main()